/** Implements a graphical bomb. */
class Bomb {

   field int x, y; // screen location of the bomb's top-left corner

   /** Constructs a new bomb with a given location and size. */
   constructor Bomb new(int Ax) {
      let x = Ax;
      let y = 10;
      do draw();
      return this;
	}

   /** Disposes this bomb. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
	}

   /** Draws the bomb on the screen. */
   method void draw() {
		var int memAddress;
		let memAddress = 16384 + Math.multiply(32,y) + x;
		do Memory.poke(memAddress + 0, 896);
		do Memory.poke(memAddress + 32, 128);
		do Memory.poke(memAddress + 64, 128);
		do Memory.poke(memAddress + 96, 128);
		do Memory.poke(memAddress + 128, 992);
		do Memory.poke(memAddress + 160, 992);
		do Memory.poke(memAddress + 192, 992);
		do Memory.poke(memAddress + 224, 4088);
		do Memory.poke(memAddress + 256, 8188);
		do Memory.poke(memAddress + 288, 16366);
		do Memory.poke(memAddress + 320, 32759);
		do Memory.poke(memAddress + 352, 32759);
		do Memory.poke(memAddress + 384, 32767);
		do Memory.poke(memAddress + 416, 32767);
		do Memory.poke(memAddress + 448, 32767);
		do Memory.poke(memAddress + 480, 32767);
		do Memory.poke(memAddress + 512, 16382);
		do Memory.poke(memAddress + 544, 8188);
		do Memory.poke(memAddress + 576, 2032);
		return;
	}

   /** Draws the bomb on the screen. */
   method void erase() {
		var int memAddress;
		let memAddress = 16384 + Math.multiply(32,y) + x;
		do Memory.poke(memAddress + 0, 0);
		do Memory.poke(memAddress + 32, 0);
		do Memory.poke(memAddress + 64, 0);
		do Memory.poke(memAddress + 96, 0);
		do Memory.poke(memAddress + 128, 0);
		do Memory.poke(memAddress + 160, 0);
		do Memory.poke(memAddress + 192, 0);
		do Memory.poke(memAddress + 224, 0);
		do Memory.poke(memAddress + 256, 0);
		do Memory.poke(memAddress + 288, 0);
		do Memory.poke(memAddress + 320, 0);
		do Memory.poke(memAddress + 352, 0);
		do Memory.poke(memAddress + 384, 0);
		do Memory.poke(memAddress + 416, 0);
		do Memory.poke(memAddress + 448, 0);
		do Memory.poke(memAddress + 480, 0);
		do Memory.poke(memAddress + 512, 0);
		do Memory.poke(memAddress + 544, 0);
		do Memory.poke(memAddress + 576, 0);
		return;
	}


   /** Moves the square down by 2 pixels. */
   method void startFalling() {
   if (y < 230) {
		do erase();
		let y = y + 7;
		do draw();
		do Sys.wait(5);
   }
   else {
		do erase();
		let y = 10;
		if (x>15) {
			let x = 31 - x;
		}
		else {
			let x = 15 + x;
		}
   }
    return;
	}
	
	method int getX () {
		return Math.multiply(x,16);
	}
	
	method int getY () {
		return y;
	}
}

