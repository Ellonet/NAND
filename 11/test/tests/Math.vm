function Math.init 2
push constant 16
call Array.new 1
pop static 0
push constant 1
pop local 0
push constant 0
pop local 1
label LABEL0
push local 1
push constant 16
lt
not
if-goto LABEL1
push local 1
push static 0
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push local 0
add
pop local 0
push local 1
push constant 1
add
pop local 1
goto LABEL0
label LABEL1
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
if-goto LABEL2
goto LABEL3
label LABEL2
push argument 0
neg
return
goto LABEL4
label LABEL3
push argument 0
return
label LABEL4
function Math.multiply 4
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
if-goto LABEL5
goto LABEL6
label LABEL5
push constant 0
return
label LABEL6
push constant 0
pop local 2
push constant 0
pop local 0
push argument 0
pop local 1
label LABEL7
push local 2
push constant 16
lt
not
if-goto LABEL8
push argument 1
push local 2
call Math.bitValueAt 2
if-goto LABEL9
goto LABEL10
label LABEL9
push local 0
push local 1
add
pop local 0
label LABEL10
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto LABEL7
label LABEL8
push local 0
return
function Math.divide 2
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
if-goto LABEL11
goto LABEL12
label LABEL11
push constant 0
return
label LABEL12
push argument 0
push constant 0
lt
push argument 1
push constant 0
gt
and
push argument 1
push constant 0
lt
push argument 0
push constant 0
gt
and
or
pop local 1
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 0
push argument 1
call Math.divideHelper 2
pop local 0
push local 1
if-goto LABEL13
goto LABEL14
label LABEL13
push local 0
neg
return
goto LABEL15
label LABEL14
push local 0
return
label LABEL15
function Math.divideHelper 1
push argument 1
push argument 0
gt
if-goto LABEL16
goto LABEL17
label LABEL16
push constant 0
return
label LABEL17
push argument 0
push argument 1
push argument 1
add
call Math.divideHelper 2
pop local 0
push argument 0
push local 0
push local 0
add
push argument 1
call Math.multiply 2
sub
push argument 1
lt
if-goto LABEL18
goto LABEL19
label LABEL18
push local 0
push local 0
add
return
goto LABEL20
label LABEL19
push local 0
push local 0
add
push constant 1
add
return
label LABEL20
function Math.sqrt 3
push constant 0
pop local 0
push constant 7
pop local 1
label LABEL21
push local 1
push constant 1
neg
gt
not
if-goto LABEL22
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 2
push local 2
push argument 0
gt
not
push local 2
push constant 0
gt
and
if-goto LABEL23
goto LABEL24
label LABEL23
push local 0
push local 1
push static 0
add
pop pointer 1
push that 0
add
pop local 0
label LABEL24
push local 1
push constant 1
sub
pop local 1
goto LABEL21
label LABEL22
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto LABEL25
goto LABEL26
label LABEL25
push argument 0
return
goto LABEL27
label LABEL26
push argument 1
return
label LABEL27
function Math.min 0
push argument 0
push argument 1
lt
if-goto LABEL28
goto LABEL29
label LABEL28
push argument 0
return
goto LABEL30
label LABEL29
push argument 1
return
label LABEL30
function Math.bitValueAt 0
push argument 0
push argument 1
push static 0
add
pop pointer 1
push that 0
and
push constant 0
eq
if-goto LABEL31
goto LABEL32
label LABEL31
push constant 0
return
goto LABEL33
label LABEL32
push constant 0
not
return
label LABEL33
