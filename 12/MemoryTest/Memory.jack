// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

	static int freeList;
	static Array ram;
	static Array heap;
	
    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048;
		let freeList = 2048;
		let heap[0] = 0;		// next
		let heap[1] = 14335;	// size
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var int curr, prev, block;
		let curr = freeList;
		let prev = freeList;
		// advance while no matching block
		while(heap[curr+1] < size + 2) {
			let prev = curr;
			let curr = heap[curr];
			if (curr = 0) {
				return -1;
			}
		}
		// case of matching block:
		let block = curr + 2;
		// set the remainder of the block as new "free black" in the free list
		let heap[curr + size + 2] = heap[curr];
		let heap[curr + size + 3] = heap[curr+1] - size - 2;
		// set the returned block:
		let heap[curr] = 0;
		let heap[curr + 1] = size;
		// if block was at end of freeList - restart freeList to new segment made from the remainder. 
		// otherwise - update prev to point the to new segment made from the remainder:
		if (prev = 0) {
			let freeList = curr + size + 2;
		} else {
			let heap[prev] = curr + size + 2;
		}
		return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		// freeList is the beginning of the free ones!
		var int temp;
		let temp = freeList;
		let freeList = o[-2];
		let o[-2] = temp;
		return;
    }    
}
