class GameRunner {
	field int direction;
	field Basket basket;
	field Bomb bomb;
	field Array allDrops;
	field Array allBombs;
	field int score;
	field int numOfDrops;
	field int numOfBombs;

	
	/** Constructs a new Square Game. */
	constructor GameRunner new() {
		let basket = Basket.new(220, 230);
		let direction = 0;
		let score = 0;
		let numOfDrops = 5;
		let numOfBombs = 2;
		do generateDrops();
		do generateBombs();
		do gameBoard();
		return this;
    }
	
	method void updateGame() {
		var int speed;
		var int i;
		var Drop d;
		var Bomb b;
		var boolean isCollision;
		let i = 0;
		
		// go throw all the drops
		while (i<numOfDrops) {
			let d = allDrops[i];
			do d.startFalling();
			let isCollision = checkCollision(d);
			if (isCollision) {
				do d.erase();
				do basket.blink();
				let speed = d.getSpeed();
				let allDrops[i] = Drop.new(d.getX(),(speed+1));
				do d.dispose();
				do printScore();
				
			}
			let i = i + 1;
		}
		
		let i = 0;
		
		// go throw all the bombs
		while (i<numOfBombs) {
			let b = allBombs[i];
			do b.startFalling();
			let isCollision = checkCollisionBomb(b);
			if (isCollision) {
				do b.erase();
				do basket.blink();
				let allBombs[i] = Bomb.new(b.getX());
				do b.dispose();
				do printScore();
				
			}
			let i = i + 1;
		}

		if (direction = 1) {	// left key pressed
			do basket.moveLeft();
		}
		if (direction = 2) {	// right key pressed
			do basket.moveRight();
		}
	return;
	}
   	
	method void runFullGame() {
		var char key;
		var boolean exit;
		let exit = false;
      
		while (~exit) {
			// waits for a key to be pressed
			while (key = 0) {
				let key = Keyboard.keyPressed();
				do updateGame();
			}
			if (key = 81)  { let exit = true; }     // q key
			if (key = 130) { let direction = 1; }   // left arrow
			if (key = 132) { let direction = 2; }   // right arrow

			// waits for the key to be released
			while (~(key = 0)) {
				let key = Keyboard.keyPressed();
				do updateGame();
			}
			let direction = 0;
		} // end of while loop
		return;
	}
	
	method void generateDrops() {
		var int i;
		let allDrops = Array.new(numOfDrops);
		let i = 0;
		while(i<numOfDrops) {
			let allDrops[i] = Drop.new((i*i*20)+30,5);
			let i = i + 1;
		}
		return;
	}
	
	method void generateBombs() {
		var int i;
		let allBombs = Array.new(numOfBombs);
		let i = 0;
		while(i<numOfBombs) {
			let allBombs[i] = Bomb.new((i*i*10)+50);
			let i = i + 1;
		}
		return;
	}
	
	method boolean checkCollision(Drop d){
		var int xBasket;
		var int yBasket;
		var int dx;
		var int dy;
		let xBasket = basket.getX();
		let yBasket = basket.getY();
		let dx = d.getX();
		let dy = d.getY();

		if ((dx > xBasket) & (dx < (xBasket+50)) & (dy > (yBasket-4)) & (dy < (yBasket+5))) {
			let score = score + 1;
			return true;
		}
	return false;
	}
	
	
	method boolean checkCollisionBomb(Bomb b){
		var int xBasket;
		var int bx;
		var int by;
		let xBasket = basket.getX();
		let bx = b.getX();
		let by = b.getY();

		if ((10<by) & (by<14) & (xBasket< Math.multiply(bx,16)) & ((Math.multiply(bx,16)<xBasket+50))) {
			let score = score - 2;
			if (score < 0){
				let score = 0;
			}
			return true;
		}
	return false;
	}
	
	
	method void printScore() {
		do Output.moveCursor(0,46);
		do Output.printInt(score);
		return;
	}
	
	method void gameBoard () {
		do Output.moveCursor(0,1);
		do Output.printString("HUNGRY BASKET                    Game Score: ");
		do printScore();
		
		return;
	}

}
