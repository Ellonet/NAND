/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
	 // case 11
	 ALU(x=x ,y=y ,zx=instruction[5] ,nx=instruction[4] ,zy=instruction[3] ,ny=instruction[2] ,f=instruction[1] ,no=instruction[0] ,out=outALU); 
	 
	 // case 10/00
	 Mul(a=x ,b=y, out=outMul);
	
	 // case 01
	 Mux16(a=y,b=x,sel=instruction[4],out=toShift);
	 ShiftRight(in=toShift, out=shiftRight);
	 ShiftLeft(in=toShift, out=shiftLeft);
	 Mux16(a=shiftRight,b=shiftLeft,sel=instruction[5],out=outShift);
	 
	 Mux4Way16(a=outMul,b=outShift,c=outMul,d=outALU,sel=instruction[7..8],out=out,out=final,out[15]=ng);
	 Or16Way(in=final, out=zrNot);
	 Not(in=zrNot,out=zr);
}
