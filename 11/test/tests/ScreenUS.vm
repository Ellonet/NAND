function Screen.init 0
push constant 16384
pop static 0
push constant 0
not
pop static 1
call Screen.initBitmaskArray 0
pop temp 0
push constant 0
return
function Screen.initBitmaskArray 2
push constant 16
call Array.new 1
pop temp 0
pop static 2
push constant 1
pop local 1
push constant 0
pop local 0
label LOOP.73
push local 0
push constant 16
lt
not
if-goto BRAKE.78
push local 0
push static 2
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto LOOP.73
label BRAKE.78
push constant 0
return
function Screen.clearScreen 1
push static 1
pop local 0
push constant 0
call Screen.setColor 1
pop temp 0
push constant 0
push constant 0
push constant 511
push constant 255
call Screen.drawRectangle 4
pop temp 0
push local 0
call Screen.setColor 1
pop temp 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 1
push constant 0
return
function Screen.moduloPower2 0
push argument 0
push argument 1
push constant 1
sub
and
return
function Screen.drawPixel 3
push static 0
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 16
call Screen.moduloPower2 2
pop temp 0
pop local 2
push local 0
call Memory.peek 1
pop temp 0
pop local 1
push static 1
if-goto IF_TRUE.253
goto IF_FALSE.253
label IF_TRUE.253
push local 1
push local 2
push static 2
add
pop pointer 1
push that 0
or
pop local 1
goto END.253
label IF_FALSE.253
push local 1
push local 2
push static 2
add
pop pointer 1
push that 0
not
and
pop local 1
label END.253
push local 0
push local 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 7
push constant 0
pop local 0
push argument 2
push argument 0
sub
pop local 3
push argument 3
push argument 1
sub
pop local 4
push argument 0
push argument 2
call Math.min 2
pop temp 0
pop local 5
push argument 1
push argument 3
call Math.min 2
pop temp 0
pop local 6
push local 3
push constant 0
lt
push local 4
push constant 0
gt
and
push local 3
push constant 0
gt
push local 4
push constant 0
lt
and
or
if-goto IF_TRUE.404
goto IF_FALSE.404
label IF_TRUE.404
push local 4
push constant 0
lt
if-goto IF_TRUE.411
goto IF_FALSE.411
label IF_TRUE.411
push argument 0
push argument 1
push local 3
push local 4
call Screen.drawDiagonalLine 4
pop temp 0
goto END.411
label IF_FALSE.411
push argument 2
push argument 3
push local 3
neg
push local 4
neg
call Screen.drawDiagonalLine 4
pop temp 0
label END.411
push constant 0
return
goto END.404
label IF_FALSE.404
push local 3
call Math.abs 1
pop temp 0
pop local 3
push local 4
call Math.abs 1
pop temp 0
pop local 4
label END.404
push local 4
push constant 0
eq
if-goto IF_TRUE.478
goto IF_FALSE.478
label IF_TRUE.478
push local 5
push local 6
push local 3
call Screen.drawVerticalLineOptimized 3
pop temp 0
push constant 0
return
goto END.478
label IF_FALSE.478
label END.478
push local 3
push constant 0
eq
if-goto IF_TRUE.500
goto IF_FALSE.500
label IF_TRUE.500
push local 5
push local 6
push local 4
call Screen.drawHorizontalLine 3
pop temp 0
push constant 0
return
goto END.500
label IF_FALSE.500
label END.500
label LOOP.518
push local 1
push local 3
gt
not
push local 2
push local 4
gt
not
and
not
if-goto BRAKE.537
push local 5
push local 1
add
push local 6
push local 2
add
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 0
lt
if-goto IF_TRUE.557
goto IF_FALSE.557
label IF_TRUE.557
push local 1
push constant 1
add
pop local 1
push local 0
push local 4
add
pop local 0
goto END.557
label IF_FALSE.557
push local 2
push constant 1
add
pop local 2
push local 0
push local 3
sub
pop local 0
label END.557
goto LOOP.518
label BRAKE.537
push constant 0
return
function Screen.drawDiagonalLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label LOOP.636
push local 1
push argument 2
gt
not
push local 2
push argument 3
lt
not
and
not
if-goto BRAKE.655
push argument 0
push local 1
add
push argument 1
push local 2
add
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 0
lt
if-goto IF_TRUE.675
goto IF_FALSE.675
label IF_TRUE.675
push local 2
push constant 1
sub
pop local 2
push local 0
push argument 2
add
pop local 0
goto END.675
label IF_FALSE.675
push local 1
push constant 1
add
pop local 1
push local 0
push argument 3
add
pop local 0
label END.675
goto LOOP.636
label BRAKE.655
push constant 0
return
function Screen.drawHorizontalLine 1
push constant 0
pop local 0
label LOOP.737
push local 0
push argument 2
gt
not
not
if-goto BRAKE.745
push argument 0
push argument 1
push local 0
add
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto LOOP.737
label BRAKE.745
push constant 0
return
function Screen.drawVerticalLineOptimized 4
push argument 2
push constant 16
lt
if-goto IF_TRUE.798
goto IF_FALSE.798
label IF_TRUE.798
push argument 0
push argument 1
push argument 2
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
goto END.798
label IF_FALSE.798
label END.798
push constant 0
pop local 0
push argument 0
push argument 0
push constant 16
call Screen.moduloPower2 2
pop temp 0
sub
push constant 16
add
pop local 3
push static 0
push argument 1
push constant 32
call Math.multiply 2
add
push local 3
push constant 16
call Math.divide 2
add
pop local 2
push argument 2
push argument 2
push constant 16
call Screen.moduloPower2 2
pop temp 0
sub
push constant 16
sub
pop local 1
push argument 0
push argument 1
push local 3
push argument 0
sub
call Screen.drawVerticalLine 3
pop temp 0
label LOOP.888
push local 0
push local 1
lt
not
if-goto BRAKE.893
push local 2
push static 1
call Memory.poke 2
pop temp 0
push local 2
push constant 1
add
pop local 2
push local 0
push constant 16
add
pop local 0
goto LOOP.888
label BRAKE.893
push argument 0
push local 1
add
push argument 1
push argument 2
push local 1
sub
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
function Screen.drawVerticalLine 1
push constant 0
pop local 0
label LOOP.964
push local 0
push argument 2
gt
not
not
if-goto BRAKE.972
push argument 0
push local 0
add
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto LOOP.964
label BRAKE.972
push constant 0
return
function Screen.drawRectangle 3
push argument 2
push argument 0
sub
call Math.abs 1
pop temp 0
pop local 1
push argument 3
push argument 1
sub
call Math.abs 1
pop temp 0
pop local 2
label LOOP.1046
push local 0
push local 2
lt
not
if-goto BRAKE.1051
push argument 0
push argument 1
push local 0
add
push local 1
call Screen.drawVerticalLineOptimized 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto LOOP.1046
label BRAKE.1051
push constant 0
return
function Screen.drawCircle 3
push argument 2
neg
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 2
label LOOP.1113
push local 0
push argument 2
gt
not
not
if-goto BRAKE.1121
push local 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop temp 0
pop local 1
push argument 0
push local 1
sub
push argument 1
push local 0
add
push local 1
push constant 2
call Math.multiply 2
call Screen.drawVerticalLineOptimized 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto LOOP.1113
label BRAKE.1121
push constant 0
return
