/**
 * Implements the "Hungry Busket" game.
 * In this fun game the player controls a basket, moving it left an right.
 * The player has to catch as many fruits as possible, while avoiding the bombs.
 * Each fruit is worth 1 point. 
 * Each bomb hit results in 1 life lost and 2 points lost. 
 * If the player earns 10 points without being hit by the bomb - he will earn 1 life.
 * The 'q' key is used to quit the game.
 */

class GameRunner {
	// Declaring all the objects in the game:
	field Basket basket;
	field int numOfBombs;
	field Array allBombs;
	field int numOfFruits;
	field Array allFruits;
	// initializing the parameter of this game:
	field int life;
	field int score;
	field int direction;
	field Array locations;
	field int currLocation;
	field int numOfLocations;
	field int addLifeCounter;
	field String Message;
	field String Header;
	field boolean gameOver;
	field boolean exit;
	
	/** Constructs a new "Hungry Basket" Game. */
	constructor GameRunner new() {
		let basket = Basket.new(220, 230);
		let direction = 0;
		let score = 0;
		let addLifeCounter =0;
		let numOfBombs = 3;
		let numOfFruits = 5;
		let life = 3;
		let currLocation = 0;
		let gameOver = false;
		let exit = false;
		let numOfLocations = 17;
		let Header = " to exit press q  HUNGRY BASKET    Game Score:     Life: ";
		return this;
    }
	
	/** Runs the game loop while there is no win, lost or EXIT pressed. */
	method void runFullGame() {
		var int c;
		var Bomb tempBomb;
		var Fruit tempFruit;
		var char key;
		do printStartGame();
		do generateLocations();
		do generateBombs();
		do generateFruits();
		do gameBoard();
		
		// Runing the game while the EXIT flag is off:
		while (~exit) {
		
			// waits for a key to be pressed
			while (key = 0) {
				let key = Keyboard.keyPressed();
				do updateGame();
				if (exit) {
					do Sys.wait(500);
					return;
				}
			}
			if (key = 81)  { let exit = true; }     // q key
			if (key = 130) { let direction = 1; }   // left arrow
			if (key = 132) { let direction = 2; }   // right arrow

			// waits for the key to be released
			while (~(key = 0)) {
				let key = Keyboard.keyPressed();
				do updateGame();
			}
			let direction = 0;
		} // end of while loop
		
		// when the game is over - disposing all the objects in the game.
		let c = 0;
		while (c < numOfBombs) {
			let tempBomb = allBombs[c];
			do tempBomb.dispose();
			let c = c + 1;
		}
		let c = 0;
		while (c < numOfFruits) {
			let tempFruit = allFruits[c];
			do tempFruit.dispose();
			let c = c + 1;
		}
		do basket.dispose();		
		return;
	}
			
	/** Recieves an input from the player and updates the game board accordingly. */
	method void updateGame() {
		var int new_speed;
		var int i;
		var int type;
		var Bomb b;
		var Fruit f;
		var boolean isCollision;
		var int nextLocation;
				
		// update all the bombs and check for hits:
		let i = 0;
		while (i<numOfBombs) {
			let b = allBombs[i];
			do b.startFalling();
			let isCollision = checkCollisionBomb(b);
			if (isCollision) {
				let addLifeCounter = 0;
				do b.erase();
				do basket.blink();
				let nextLocation = locations[currLocation];
				let currLocation = currLocation + 1;
				if (currLocation = numOfLocations){
					let currLocation = 0;
				}
				let allBombs[i] = Bomb.new(nextLocation);
				do b.dispose();
				do printScore();
				do printLife();
				if (gameOver){
					do printGameOver();
					return;
				}
			}
			let i = i + 1;
		}

		// update all the fruits and check for hits:
		let i = 0;
		while (i<numOfFruits) {
			let f = allFruits[i];
			do f.startFalling();
			let isCollision = checkCollisionFruit(f);
			if (isCollision) {
				do f.erase();
				do basket.blink();
				let type = f.getType();
				let nextLocation = locations[currLocation];
				let currLocation = currLocation + 1;
				if (currLocation = numOfLocations){
					let currLocation = 0;
				}
				// re-create a fruit if one was collected:
				if (type = 1) {
					let allFruits[i] = Fruit.new(nextLocation, 2);
				}
				if (type = 2) {
					let allFruits[i] = Fruit.new(nextLocation, 3);					
				}
				if (type = 3) {
					let allFruits[i] = Fruit.new(nextLocation, 1);
				}
				do f.dispose();
				do printScore();
				do printLife();				
			}
			let i = i + 1;
		}		
		
		// get user input for next turn:
		if (direction = 1) {	// left key pressed
			do basket.moveLeft();
		}
		if (direction = 2) {	// right key pressed
			do basket.moveRight();
		}
		
	do basket.draw();
	// check if the player won:
	if (score=50){
		do printWonGame();
	}
	return;
	}
   	
	/** Generating the desired amount of bombs in the allBombs array */
	method void generateBombs() {
		var int i;
		let allBombs = Array.new(numOfBombs);
		let i = 0;
		while(i<numOfBombs) {
			let allBombs[i] = Bomb.new(locations[currLocation]);
			let currLocation = currLocation + 1;
			if (currLocation = numOfLocations){
				let currLocation = 0;
			}
			let i = i + 1;
		}
		return;
	}

	/** Generating the desired amount of fruits in the allFruits array */
	method void generateFruits() {
		var int j;
		let allFruits = Array.new(numOfFruits);
		let j = 0;
		while(j<numOfFruits) {
			let allFruits[j] = Fruit.new(locations[currLocation],1);
			let currLocation = currLocation + 1;
			if (currLocation = numOfLocations){
				let currLocation = 0;
			}
			let j = j + 1;
		}
		return;
	}
	
	/** Generating a "random" array of locations to control where the objects are placed. */
	method void generateLocations() {
		let locations = Array.new(numOfLocations);
		let locations[0] = 28;
		let locations[1] = 12;
		let locations[2] = 5;
		let locations[3] = 20;
		let locations[4] = 7;
		let locations[5] = 31;
		let locations[6] = 26;
		let locations[7] = 10;
		let locations[8] = 13;
		let locations[9] = 2;
		let locations[10] = 18;
		let locations[11] = 4;
		let locations[12] = 24;
		let locations[13] = 6;
		let locations[14] = 22;
		let locations[15] = 16;
		let locations[16] = 1;
		return;	
	}

	
	/** Check if the Player cought a Fruit in the basket. */	
	method boolean checkCollisionFruit(Fruit f){
		var int xBasket;
		var int yBasket;
		var int fx;
		var int fy;
		let xBasket = basket.getX();
		let yBasket = basket.getY();
		let fx = f.getX();
		let fy = f.getY();

		if (((yBasket-17) < fy) & (fy < yBasket)& (xBasket-15< fx) & (fx < (xBasket+50))) {
			let score = score + 1;
			if (addLifeCounter = 10){
				let life = life + 1;
				do printLife();
				let addLifeCounter = 0;
			}
			else {
				let addLifeCounter = addLifeCounter + 1;
			}
			return true;
		}
	return false;
	}

	/** Check if the Player was hit by a bomb. */	
	method boolean checkCollisionBomb(Bomb b){
		var int xBasket;
		var int yBasket;
		var int bx;
		var int by;
		let xBasket = basket.getX();
		let yBasket = basket.getY();
		let bx = b.getX();
		let by = b.getY();

		if (((yBasket-17) < by) & (by < yBasket)& (xBasket-15< bx) & (bx < (xBasket+50))) {
			let score = score - 2;
			if (score < 0){
				let score = 0;
			}
			let life = life -1;
			if (life = 0){
				let gameOver = true;
			}
			return true;
		}
	return false;
	}
	
	/** Prints the players current score on the board */
	method void printScore() {
		do Output.moveCursor(0,48);
		do Output.printInt(score);
		return;
	}
	
	/** Prints the game board and the header line */
	method void gameBoard () {
		do basket.draw();
		do Output.moveCursor(0,1);
		do Output.printString(Header);
		do printScore();
		do printLife();
		return;
	}
	
	/** Prints the players life count on the board */
	method void printLife() {
		do Output.moveCursor(0,59);
		do Output.printInt(life);
		return;
	}
	
	/** Prints the game over massege on the board if the player lost */	
	method void printGameOver(){
		do Screen.clearScreen();
		do Output.moveCursor(10,22);
		let Message = "GAME OVER! GOODBYE";
		do Output.printString(Message);
		let exit = true;
		return;
	}
	
	/** Prints the winning massege on the board if the player won */		
	method void printWonGame(){
		do Screen.clearScreen();
		do Output.moveCursor(10,10);
		let Message = " OMG YOU WON THE GAME! GOOD JOB:) GOODBYE";
		do Output.printString(Message);
		let exit = true;
		return;
	}

	/** Prints the welcom titles at the begining of the game */ 
	method void printStartGame(){
		var String TitleMSG;
		var String InstructionMSG;
		var String GoodLuckMSG;
		let TitleMSG = "WELCOME TO HUNGRY BASKET GAME :)";
		let InstructionMSG = "you need to chatch the fruits and avoid the bombs";
		let GoodLuckMSG = "GOOD LUCK!";
		do Output.moveCursor(10,15);
		do Output.printString(TitleMSG);
		do Output.moveCursor(12,8);
		do Output.printString(InstructionMSG);
		do Output.moveCursor(14,26);
		do Output.printString(GoodLuckMSG);
		do Sys.wait(4000);
		do Screen.clearScreen();
		return;
	}
}
