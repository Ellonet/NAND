// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:		
	// writeM
	And(a=instruction[3], b=instruction[15], out=writeM);

	// first MUX
	Mux16(a=instruction, b=ALUout, sel=instruction[15], out=mux1out);
	
	// A register
	Not(in=instruction[15], out=instrucA);
	Or(a=instruction[5] ,b=instrucA ,out=ARegLoad);
	ARegister(in=mux1out ,load=ARegLoad ,out=Aout, out[0..14]=addressM);
	
	// second MUX
	Mux16(a=Aout, b=inM, sel=instruction[12], out=mux2out);
	
	// D register
	And(a=instruction[4] ,b=instruction[15] ,out=DRegLoad);
	DRegister(in=ALUout ,load=DRegLoad ,out=Dout);
	
	// ALU
	ALU(x=Dout ,y=mux2out ,zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6] , zr=ZR, ng=NG, out=ALUout, out=outM);
	
	// PC
	PC(in=Aout ,load=res6, inc=true, reset=reset, out[0..14]=pc);
	
	// Dmux for pc load
	DMux8Way(in=instruction[15] , sel=instruction[0..2] ,a=Null ,b=JGT ,c=JEQ ,d=JGE ,e=JLT ,f=JNE ,g=JLE ,h=JMP);
	// case null - do nothing
	// case JGT
	Or(a=ZR, b=NG, out=zrORgn);
	Not(in=zrORgn, out=NOTzrORgn);
	And(a=JGT, b=NOTzrORgn, out=JGTout);
	// case JEQ
	And(a=JEQ, b=ZR, out=JEQout);
	// case JGE
	Not(in=NG, out=notNG);
	And(a=notNG, b=JGE, out=JGEout);
	// case JLT
	And(a=JLT, b=NG, out=JLTout);
	// case JNE
	Not(in=ZR, out=notZR);
	And(a=notZR, b=JNE, out=JNEout);
	// case JLE
	And(a=JLE, b=zrORgn, out=JLEout);
	// case JMP - send  1
		
	// OR logic for PC load
	Or(a=JGTout ,b=JEQout ,out=res1);
	Or(a=JGEout ,b=JLTout ,out=res2);
	Or(a=res1 ,b=res2 ,out=res3);
	Or(a=JNEout ,b=JLEout ,out=res4);
	Or(a=JMP ,b=res4 ,out=res5);
	Or(a=res3,b=res5,out=res6);
	
		
}