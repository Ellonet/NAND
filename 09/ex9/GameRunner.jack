class GameRunner {
	field int direction;
	field Basket basket;
	field Array allDrops;
	field Array allBombs;
	field Array allFruits;
	field int numOfDrops;
	field int numOfBombs;
	field int numOfFruits;
	field int life;
	field int score;
	field int addLifeCounter;
	field boolean gameOver;
	field boolean exit;
	
	
	/** Constructs a new Square Game. */
	constructor GameRunner new() {
		let basket = Basket.new(220, 230);
		let direction = 0;
		let score = 0;
		let addLifeCounter =0;
		let numOfDrops = 1;
		let numOfBombs = 2;
		let numOfFruits = 5;
		let life = 3;
		let gameOver = false;
		let exit = false;
		do generateDrops();
		do generateBombs();
		do generateFruits();
		do gameBoard();
		return this;
    }
	
	method void updateGame() {
		var int new_speed;
		var int i;
		var int type;
		var Drop d;
		var Bomb b;
		var Fruit f;
		var boolean isCollision;
		let i = 0;
		
		// go throw all the drops
		while (i<numOfDrops) {
			let d = allDrops[i];
			do d.startFalling();
			let isCollision = checkCollision(d);
			if (isCollision) {
				do d.erase();
				do basket.blink();
				if (addLifeCounter = 20 ){
					let life = life + 1;
					do printLife();
					let addLifeCounter = 0;
				}
				let new_speed = (d.getSpeed()+1);
				if (new_speed > 19) {
					let new_speed = 19;				
				} 
				let allDrops[i] = Drop.new(d.getX(),(new_speed));
				do d.dispose();
				do printScore();
				
			}
			let i = i + 1;
		}
		
		let i = 0;
		
		// go throw all the bombs
		while (i<numOfBombs) {
			let b = allBombs[i];
			do b.startFalling();
			let isCollision = checkCollisionBomb(b);
			if (isCollision) {
				do b.erase();
				do basket.blink();
				let allBombs[i] = Bomb.new(Math.divide(b.getX(),16));
				do b.dispose();
				do printScore();
				do printLife();
				if (gameOver){
					do printGameOver();
					return;
				}
				
			}
			let i = i + 1;
		}

		let i = 0;

		// go throw all the fruits
		while (i<numOfFruits) {
			let f = allFruits[i];
			do f.startFalling();
			let isCollision = checkCollisionFruit(f);
			if (isCollision) {
				do f.erase();
				do basket.blink();
				let type = f.getType();
				if (type = 1) {
					let allFruits[i] = Fruit.new((Math.divide(f.getX(),16)),2);
				}
				else {
					let allFruits[i] = Fruit.new((Math.divide(f.getX(),16)),1);
				}
				do f.dispose();
				do printScore();
				do printLife();				
			}
			let i = i + 1;
		}		
		if (direction = 1) {	// left key pressed
			do basket.moveLeft();
		}
		if (direction = 2) {	// right key pressed
			do basket.moveRight();
		}
		
	do basket.draw();
	return;
	}
   	
	method void runFullGame() {
		var char key;
      
		while (~exit) {
			// waits for a key to be pressed
			while (key = 0) {
				let key = Keyboard.keyPressed();
				do updateGame();
				if (exit) {
					do Sys.wait(500);
					return;
				}
			}
			if (key = 81)  { let exit = true; }     // q key
			if (key = 130) { let direction = 1; }   // left arrow
			if (key = 132) { let direction = 2; }   // right arrow

			// waits for the key to be released
			while (~(key = 0)) {
				let key = Keyboard.keyPressed();
				do updateGame();
			}
			let direction = 0;
		} // end of while loop
		return;
	}
	
	method void generateDrops() {
		var int i;
		let allDrops = Array.new(numOfDrops);
		let i = 0;
		while(i<numOfDrops) {
			let allDrops[i] = Drop.new((i*i*20)+30,5);
			let i = i + 1;
		}
		return;
	}
	
	method void generateBombs() {
		var int i;
		let allBombs = Array.new(numOfBombs);
		let i = 0;
		while(i<numOfBombs) {
			let allBombs[i] = Bomb.new((i*10)+10);
			let i = i + 1;
		}
		return;
	}

	method void generateFruits() {
		var int j;
		let allFruits = Array.new(numOfFruits);
		let j = 0;
		while(j<numOfFruits) {
			let allFruits[j] = Fruit.new((j*6),1);
			let j = j + 1;
		}
		return;
	}
	
	method boolean checkCollision(Drop d){
		var int xBasket;
		var int yBasket;
		var int dx;
		var int dy;
		let xBasket = basket.getX();
		let yBasket = basket.getY();
		let dx = d.getX();
		let dy = d.getY();

		if ((dx > xBasket) & (dx < (xBasket+50)) & (dy > (yBasket-4)) & (dy < (yBasket+10))) {
			let score = score + 1;
			let addLifeCounter = addLifeCounter + 1;
			return true;
		}
		let xBasket = (xBasket - basket.getDiff());
		let yBasket = yBasket + 5;
		if ((dx > xBasket) & (dx < (xBasket+50-basket.getDiff())) & (dy > (yBasket-4)) & (dy < (yBasket+10))) {
			let score = score + 1;
			let addLifeCounter = addLifeCounter + 1;
			return true;
		}

	return false;
	}
	
	method boolean checkCollisionFruit(Fruit f){
		var int xBasket;
		var int yBasket;
		var int fx;
		var int fy;
		let xBasket = basket.getX();
		let yBasket = basket.getY();
		let fx = f.getX();
		let fy = f.getY();

		if (((yBasket-17) < fy) & (fy < yBasket)& (xBasket-15< fx) & (fx < (xBasket+50))) {
			let score = score + 1;
			let addLifeCounter = addLifeCounter + 1;
			return true;
		}
	return false;
	}

	
	method boolean checkCollisionBomb(Bomb b){
		var int xBasket;
		var int yBasket;
		var int bx;
		var int by;
		let xBasket = basket.getX();
		let yBasket = basket.getY();
		let bx = b.getX();
		let by = b.getY();

		if (((yBasket-17) < by) & (by < yBasket)& (xBasket-15< bx) & (bx < (xBasket+50))) {
			let score = score - 2;
			if (score < 0){
				let score = 0;
			}
			let life = life -1;
			if (life = 0){
				let gameOver = true;
			}
			return true;
		}
	return false;
	}
	
	
	method void printScore() {
		do Output.moveCursor(0,48);
		do Output.printInt(score);
		return;
	}
	
	method void gameBoard () {
		do Output.moveCursor(0,1);
		do Output.printString(" to exit press q  HUNGRY BASKET    Game Score:     Life: ");
		do printScore();
		do printLife();
		
		return;
	}
	
	method void printLife() {
		do Output.moveCursor(0,59);
		do Output.printInt(life);
		return;
	}
	
	method void printGameOver(){
		do Screen.clearScreen();
		do Output.moveCursor(10,20);
		do Output.printString("GAME OVER! NOW EXITING");
		let exit = true;
		return;
	}

}
