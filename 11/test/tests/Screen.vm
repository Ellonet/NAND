function Screen.init 0
push constant 16384
pop static 0
push constant 0
not
pop static 1
call Screen.initBitmaskArray 0
pop temp 0
push constant 0
return
function Screen.initBitmaskArray 2
push constant 16
call Array.new 1
pop static 2
push constant 1
pop local 1
push constant 0
pop local 0
label LABEL0
push local 0
push constant 16
lt
not
if-goto LABEL1
push local 0
push static 2
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto LABEL0
label LABEL1
push constant 0
return
function Screen.clearScreen 1
push static 1
pop local 0
push constant 0
call Screen.setColor 1
pop temp 0
push constant 0
push constant 0
push constant 511
push constant 255
call Screen.drawRectangle 4
pop temp 0
push local 0
call Screen.setColor 1
pop temp 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 1
push constant 0
return
function Screen.moduloPower2 0
push argument 0
push argument 1
push constant 1
sub
and
return
function Screen.drawPixel 3
push static 0
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 16
call Screen.moduloPower2 2
pop local 2
push local 0
call Memory.peek 1
pop local 1
push static 1
if-goto LABEL2
goto LABEL3
label LABEL2
push local 1
push local 2
push static 2
add
pop pointer 1
push that 0
or
pop local 1
goto LABEL4
label LABEL3
push local 1
push local 2
push static 2
add
pop pointer 1
push that 0
not
and
pop local 1
label LABEL4
push local 0
push local 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 7
push constant 0
pop local 0
push argument 2
push argument 0
sub
pop local 3
push argument 3
push argument 1
sub
pop local 4
push argument 0
push argument 2
call Math.min 2
pop local 5
push argument 1
push argument 3
call Math.min 2
pop local 6
push local 3
push constant 0
lt
push local 4
push constant 0
gt
and
push local 3
push constant 0
gt
push local 4
push constant 0
lt
and
or
if-goto LABEL5
goto LABEL6
label LABEL5
push local 4
push constant 0
lt
if-goto LABEL7
goto LABEL8
label LABEL7
push argument 0
push argument 1
push local 3
push local 4
call Screen.drawDiagonalLine 4
pop temp 0
goto LABEL9
label LABEL8
push argument 2
push argument 3
push local 3
neg
push local 4
neg
call Screen.drawDiagonalLine 4
pop temp 0
label LABEL9
push constant 0
return
goto LABEL10
label LABEL6
push local 3
call Math.abs 1
pop local 3
push local 4
call Math.abs 1
pop local 4
label LABEL10
push local 4
push constant 0
eq
if-goto LABEL11
goto LABEL12
label LABEL11
push local 5
push local 6
push local 3
call Screen.drawVerticalLineOptimized 3
pop temp 0
push constant 0
return
label LABEL12
push local 3
push constant 0
eq
if-goto LABEL13
goto LABEL14
label LABEL13
push local 5
push local 6
push local 4
call Screen.drawHorizontalLine 3
pop temp 0
push constant 0
return
label LABEL14
label LABEL15
push local 1
push local 3
gt
not
push local 2
push local 4
gt
not
and
not
if-goto LABEL16
push local 5
push local 1
add
push local 6
push local 2
add
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 0
lt
if-goto LABEL17
goto LABEL18
label LABEL17
push local 1
push constant 1
add
pop local 1
push local 0
push local 4
add
pop local 0
goto LABEL19
label LABEL18
push local 2
push constant 1
add
pop local 2
push local 0
push local 3
sub
pop local 0
label LABEL19
goto LABEL15
label LABEL16
push constant 0
return
function Screen.drawDiagonalLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label LABEL20
push local 1
push argument 2
gt
not
push local 2
push argument 3
lt
not
and
not
if-goto LABEL21
push argument 0
push local 1
add
push argument 1
push local 2
add
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 0
lt
if-goto LABEL22
goto LABEL23
label LABEL22
push local 2
push constant 1
sub
pop local 2
push local 0
push argument 2
add
pop local 0
goto LABEL24
label LABEL23
push local 1
push constant 1
add
pop local 1
push local 0
push argument 3
add
pop local 0
label LABEL24
goto LABEL20
label LABEL21
push constant 0
return
function Screen.drawHorizontalLine 1
push constant 0
pop local 0
label LABEL25
push local 0
push argument 2
gt
not
not
if-goto LABEL26
push argument 0
push argument 1
push local 0
add
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto LABEL25
label LABEL26
push constant 0
return
function Screen.drawVerticalLineOptimized 4
push argument 2
push constant 16
lt
if-goto LABEL27
goto LABEL28
label LABEL27
push argument 0
push argument 1
push argument 2
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
label LABEL28
push constant 0
pop local 0
push argument 0
push argument 0
push constant 16
call Screen.moduloPower2 2
sub
push constant 16
add
pop local 3
push static 0
push argument 1
push constant 32
call Math.multiply 2
add
push local 3
push constant 16
call Math.divide 2
add
pop local 2
push argument 2
push argument 2
push constant 16
call Screen.moduloPower2 2
sub
push constant 16
sub
pop local 1
push argument 0
push argument 1
push local 3
push argument 0
sub
call Screen.drawVerticalLine 3
pop temp 0
label LABEL29
push local 0
push local 1
lt
not
if-goto LABEL30
push local 2
push static 1
call Memory.poke 2
pop temp 0
push local 2
push constant 1
add
pop local 2
push local 0
push constant 16
add
pop local 0
goto LABEL29
label LABEL30
push argument 0
push local 1
add
push argument 1
push argument 2
push local 1
sub
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
function Screen.drawVerticalLine 1
push constant 0
pop local 0
label LABEL31
push local 0
push argument 2
gt
not
not
if-goto LABEL32
push argument 0
push local 0
add
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto LABEL31
label LABEL32
push constant 0
return
function Screen.drawRectangle 3
push argument 2
push argument 0
sub
call Math.abs 1
pop local 1
push argument 3
push argument 1
sub
call Math.abs 1
pop local 2
label LABEL33
push local 0
push local 2
lt
not
if-goto LABEL34
push argument 0
push argument 1
push local 0
add
push local 1
call Screen.drawVerticalLineOptimized 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto LABEL33
label LABEL34
push constant 0
return
function Screen.drawCircle 3
push argument 2
neg
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 2
label LABEL35
push local 0
push argument 2
gt
not
not
if-goto LABEL36
push local 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 0
push local 1
sub
push argument 1
push local 0
add
push local 1
push constant 2
call Math.multiply 2
call Screen.drawVerticalLineOptimized 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto LABEL35
label LABEL36
push constant 0
return
